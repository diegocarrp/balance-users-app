# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "develop" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  IMAGE: static-site

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Build image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: gcr.io/$PROJECT_ID/<IMAGE_NAME>:${{ env.TAG_NAME }}

    - name: Deploy to GKE
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@v2
      with:
        version: <VERSION>
        project_id: $PROJECT_ID
        service_account_key: ${{ secrets.GCLOUD_AUTH }}

    - name: Configure kubectl
      run: |
        gcloud config set project $PROJECT_ID
        gcloud config set compute/zone $ZONE
        gcloud container clusters get-credentials $CLUSTER_NAME

    - name: Apply deployment
      run: | 
        kubectl apply -f k8s/develop/deployment.yml
